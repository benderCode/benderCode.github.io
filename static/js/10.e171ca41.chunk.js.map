{"version":3,"sources":["pages/money/pay.jsx"],"names":["pay","props","state","IP","simplifyInfo","payInfo","isLoading","this","match","params","data","JSON","parse","setState","window","returnCitySN","getHtDeductibleInfoList","workOrderId","className","title","leftClick","history","goBack","productName","insured","validity","deductiblesLimit","Public","text","click","wxPayOrder","formId","Get","requestUrl","then","result","status","message","error","catch","console","log","_this","Post","openId","id","wx","config","debug","appId","timestamp","timeStamp","nonceStr","signature","jsApiList","ready","res","chooseWXPay","package","signType","paySign","success","errMsg","push","finally","React","Component","defaultProps"],"mappings":"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","file":"static/js/10.e171ca41.chunk.js","sourcesContent":["/**\n * 付款页面 pay\n */\n\nimport React from 'react';\nimport Nav from '../../components/nav'; // 导航组件\nimport Btn from '../../components/btn'; // 按钮组件\nimport Loading from '../../components/Loading';\nimport './pay.css';\nimport { Get, Post } from '../../network/Fetch';\nimport { requestUrl } from '../../network/Url';\nimport * as Public from '../../utils/Public';\nimport { message } from 'antd';\n\nexport default class pay extends React.Component {\n    static defaultProps = {\n\n    };\n    constructor(props) {\n        super(props);\n        this.state = {\n            IP: '',\n            simplifyInfo: {},// 必要信息\n            payInfo: {},// 支付信息\n            isLoading: false,//\n        }\n    }\n\n    componentWillMount() {\n        if (this.props.match.params) {\n            let data = JSON.parse(this.props.match.params.data)\n            this.setState({\n                simplifyInfo: data,\n            })\n        }\n        this.setState({\n            IP: window.returnCitySN[\"cip\"],\n        })\n    }\n\n    componentDidMount() {\n        this.getHtDeductibleInfoList(this.state.simplifyInfo.workOrderId);\n    }\n\n    render() {\n        return (\n            <div className=\"container pay\">\n                <Nav title=\"自付款\" leftClick={() => { this.props.history.goBack() }} />\n                <div className=\"content\">\n                    <div className=\"payInfoContent\">\n                        <div className=\"rowBox\">\n                            <p className=\"title\">工单号：</p>\n                            <p className=\"value\">{this.state.simplifyInfo.workOrderId}</p>\n                        </div>\n                        <div className=\"rowBox\">\n                            <p className=\"title\">产品名称：</p>\n                            <p className=\"value\">{this.state.simplifyInfo.productName}</p>\n                        </div>\n                        <div className=\"rowBox\">\n                            <p className=\"title\">投保设备：</p>\n                            <p className=\"value\">{this.state.simplifyInfo.insured}</p>\n                        </div>\n                        <div className=\"rowBox\">\n                            <p className=\"title\">有效期：</p>\n                            <p className=\"value\">{this.state.simplifyInfo.validity}</p>\n                        </div>\n                    </div>\n                    <div className=\"payPicContent\">\n                        <p className=\"picTitle\">自付款：</p>\n                        <p className=\"picText\"><span className=\"currency\">￥</span><span className=\"num\">{this.state.payInfo.deductiblesLimit && Public.fomatFloat(this.state.payInfo.deductiblesLimit / 100)}</span></p>\n                    </div>\n                </div>\n                <Btn text={'立即支付'} click={() => { this.wxPayOrder() }} />\n                {this.state.isLoading ? <Loading text=\"加载中...\" /> : null}\n            </div>\n        );\n    }\n\n    // 自付款查询接口\n    getHtDeductibleInfoList(formId) {\n        Get(requestUrl.getHtDeductibleInfoList + `?formId=${formId}`).then((result) => {\n            if (result.status === \"SUCCESS\") {\n                this.setState({\n                    payInfo: result.data\n                })\n            } else {\n                this.setState({\n                    payInfo: {}\n                })\n                message.error('获取下单信息失败');\n            }\n        }).catch((error) => {\n            console.log(error)\n        })\n    }\n\n    /**\n     * 微信支付\n     * \n     * wxPayOrder\n    */\n    wxPayOrder() {\n        this.setState({ isLoading: true })\n        let _this = this;\n        Post(requestUrl.wxPayOrder, {\n            \"formId\": this.state.simplifyInfo.workOrderId,\n            \"openid\": Public.getItem('userInfo').openId,\n            \"outTradeNo\": this.state.payInfo.id,\n            \"spbillCreateIp\": this.state.IP,\n            \"totalFee\": this.state.payInfo.deductiblesLimit\n        }).then((result) => {\n            // appId:\"wx1616c8392f192452\"\n            // nonceStr:\"e398bc593e354b6c84c4591309742fd5\"\n            // package:\"prepay_id=wx21175736660104172fd8565b1741690800\"\n            // paySign:\"0586BCF492848A2A66E7B1EF3DC26E95\"\n            // signType:\"MD5\"\n            // timeStamp:\"1587463056\"\n\n            if (result.status === 'SUCCESS') {\n                this.setState()\n                window.wx.config({\n                    debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n                    appId: result.data.appId, // 必填，公众号的唯一标识\n                    timestamp: result.data.timeStamp, // 必填，生成签名的时间戳\n                    nonceStr: result.data.nonceStr, // 必填，生成签名的随机串\n                    signature: 'MD5',// 必填，签名\n                    jsApiList: ['chooseWXPay'] // 必填，需要使用的JS接口列表\n                });\n                window.wx.ready(res => {\n                    window.wx.chooseWXPay({\n                        timestamp: result.data.timeStamp, // 支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符\n                        nonceStr: result.data.nonceStr, // 支付签名随机串，不长于 32 位\n                        package: result.data.package, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=\\*\\*\\*）\n                        signType: result.data.signType, // 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'\n                        paySign: result.data.paySign, // 支付签名\n                        success: function (res) {\n                            if (res.errMsg == 'chooseWXPay:ok') {\n                                _this.props.history.push('/paySuccess')\n                            } else if (res.errMsg == 'chooseWXPay:cancel') {\n                                message.error(\"用户已取消\", 2);\n                                _this.props.history.push('/payFailed')\n                            } else if (res.errMsg == 'chooseWXPay:fail') {\n                                message.error(\"支付失败\", 2);\n                                _this.props.history.push('/payFailed')\n                            } else {\n                                message.error(\"支付失败\", 2);\n                                _this.props.history.push('/payFailed')\n                            }\n                        },\n                    });\n                })\n            } else {\n                this.props.history.push('/payFailed')\n            }\n        }).catch((error) => {\n            console.log(error)\n        }).finally(() => {\n            this.setState({ isLoading: false })\n        })\n    }\n}\n\n"],"sourceRoot":""}