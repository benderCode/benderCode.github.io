{"version":3,"sources":["utils/rem.js","utils/asyncComponent.jsx","router/index.js","store/reducer.js","store/index.js","store/actionType.js","store/serviceActionType.js","store/expressType.js","serviceWorker.js","index.js","store/addrActionType.js"],"names":["doc","win","docEl","documentElement","resizeEvt","window","recalc","clientWidth","style","fontSize","addEventListener","document","asyncComponent","importComponent","props","state","component","default","this","setState","C","Component","login","index","addrList","addAddr","pay","paySuccess","payFailed","RouteConfig","path","exact","from","to","defaultState","addressList","addressObj","userInfo","serviceObj","expressObj","store","createStore","action","type","datatype","value","key","addr","applyMiddleware","thunk","Boolean","location","hostname","match","moment","locale","message","config","top","duration","maxCount","FastClick","attach","body","Route","ReactDOM","render","zhCN","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","SAVE_ADDR","DELETE_ADDR"],"mappings":"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","file":"static/js/main.fe9c1e2a.chunk.js","sourcesContent":["(function (doc, win) {  // 自适应\n  var docEl = doc.documentElement,\n    resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',\n    recalc = function () {\n      var clientWidth = docEl.clientWidth;\n      if (!clientWidth) return;\n      docEl.style.fontSize = (clientWidth / 18.75) + 'px';\n    };\n  if (!doc.addEventListener) return;\n  win.addEventListener(resizeEvt, recalc, false);\n  doc.addEventListener('DOMContentLoaded', recalc, false);\n})(document, window);","/**\n * 异步加载模块\n * @param {*} importComponent \n */\n\nimport React, { Component } from \"react\";\nexport default function asyncComponent(importComponent) {\n    class AsyncComponent extends Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                component: null\n            };\n        }\n\n        async componentDidMount() {\n            const { default: component } = await importComponent();\n\n            this.setState({ component });\n        }\n\n        render() {\n            const C = this.state.component;\n\n            return C ? <C {...this.props} /> : null;\n        }\n    }\n    return AsyncComponent;\n}","import React, { Component } from 'react'\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport asyncComponent from '../utils/asyncComponent'\n\n\nconst login = asyncComponent(() => import(\"../pages/login/login\")) // 登录\nconst index = asyncComponent(() => import(\"../pages/index/index\")) // 首页\n\n\nconst addrList = asyncComponent(() => import(\"../pages/addr/addrList\")) // 地址列表\nconst addAddr = asyncComponent(() => import(\"../pages/addr/addAddr\")) // 新增地址\n\nconst pay = asyncComponent(() => import(\"../pages/money/pay\")) // 付款页面\nconst paySuccess = asyncComponent(() => import(\"../pages/money/paySuccess\")) // 付款成功页面\nconst payFailed = asyncComponent(() => import(\"../pages/money/payFailed\")) // 付款失败页面\n\nexport default class RouteConfig extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <Switch>\n                    <Route path=\"/login\" exact component={login} />\n                    <Route path=\"/index\" exact component={index} />\n\n                    <Route path=\"/addrList/:type\" component={addrList} />\n                    <Route path=\"/addAddr\" component={addAddr} />\n\n                    <Route path=\"/pay/:data\" component={pay} />\n                    <Route path=\"/paySuccess\" component={paySuccess} />\n                    <Route path=\"/payFailed\" component={payFailed} />\n\n                    <Redirect from=\"/\" to=\"index\" />\n                </Switch>\n            </HashRouter>\n        )\n    }\n}","import * as user from './actionType'; // 用户\nimport * as addr from './addrActionType';// 地址\nimport * as service from './serviceActionType';// 服务数据\nimport * as express from './expressType'; // 下单\n\nlet defaultState = {\n    addressList: [],   // 地址列表\n    addressObj: {},  // 选中的地址\n    userInfo: {},\n    serviceObj: {},// 申请服务数据\n    expressObj: {},// 下单时间\n}\n\n// 数据管理\nexport default (state = defaultState, action = {}) => {\n    switch (action.type) {\n        case user.SAVE_USERINFO:\n            return {\n                ...state,\n                userInfo: action.userInfo\n            }\n        case user.SAVE_ATTRINFO:\n            return { ...state, ...{ [action.datatype]: action.value } };\n        case user.MODIFY_USERINFO:\n            return { ...state, userInfo: { ...state.userInfo, [action.key]: action.value } };\n        case addr.SAVE_ADDR:\n            return {\n                ...state,\n                addressObj: action.addressObj\n            }\n        case addr.DELETE_ADDR:\n            return {\n                ...state,\n                addressObj: {}\n            }\n        case service.SAVE_SERVICE:\n            return {\n                ...state,\n                serviceObj: action.serviceObj\n            }\n        case service.DELETE_SERVICE:\n            return {\n                ...state,\n                serviceObj: {}\n            }\n        case express.SAVE_EXPRESS:\n            return {\n                ...state,\n                expressObj: action.expressObj,\n            }\n        case express.DELETE_EXPRESS:\n            return {\n                ...state,\n                expressObj: {}\n            }\n        default:\n            return state\n    }\n}","import { createStore, applyMiddleware } from 'redux'\nimport userReducer from './reducer'\nimport thunk from 'redux-thunk'\n\nlet store = createStore(\n    userReducer,\n    applyMiddleware(thunk)\n)\n\nexport default store","\n// 保存用户数据\nexport const SAVE_USERINFO = 'SAVE_USERINFO'\n\n// 保存用户信息\nexport const SAVE_ATTRINFO = 'SAVE_ATTRINFO'\n\n// 修改用信息\nexport const MODIFY_USERINFO = 'MODIFY_USERINFO'\n","// 保存数据\nexport const SAVE_SERVICE = 'SAVE_SERVICE'\n\n// 删除数据\nexport const DELETE_SERVICE = 'DELETE_SERVICE'","\n// 保存下单数据\nexport const SAVE_EXPRESS = 'SAVE_EXPRESS'\n\n// 删除下单信息\nexport const DELETE_EXPRESS = 'DELETE_EXPRESS'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Route from './router/index'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport FastClick from 'fastclick'\nimport * as serviceWorker from './serviceWorker'\nimport 'antd/dist/antd.css';\nimport './utils/rem'\nimport './utils/base.css'\nimport { message, ConfigProvider } from 'antd';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nmoment.locale('en');\n\n\n\nmessage.config({\n    top: '38.2%',\n    duration: 3,\n    maxCount: 1,\n})\n\nFastClick.attach(document.body) // 处理移动端浏览器点击事件300ms延迟\n\nconst render = Component => {\n    ReactDOM.render(\n        <Provider store={store}>\n            <ConfigProvider locale={zhCN}>\n                <Component />\n            </ConfigProvider>\n        </Provider>,\n        document.getElementById('root')\n    )\n}\n\nrender(Route)\n\nserviceWorker.unregister();\n","// 保存地址\nexport const SAVE_ADDR = 'SAVE_ADDR'\n\n// 删除地址\nexport const DELETE_ADDR = 'DELETE_ADDR'"],"sourceRoot":""}